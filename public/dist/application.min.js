"use strict";var ApplicationConfiguration=function(){var applicationModuleName="greenfield",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("challenges-page"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("org"),ApplicationConfiguration.registerModule("profile"),ApplicationConfiguration.registerModule("to-do-list"),ApplicationConfiguration.registerModule("users"),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("challenges",{url:"/allchallenges",templateUrl:"modules/challenges-page/views/all-challenges.client.view.html"})}]),angular.module("challenges-page").controller("AllChallengesController",["$scope","Authentication","Todo","$location",function($scope,Authentication,Todo,$location){$scope.authentication=Authentication,$scope.allChallenges=[],$scope.addChallenge=function(index){Todo.putUserChallenge($scope.allChallenges[index]._id).then(function(res){console.log("added")},function(err){console.log(err)})},$scope.getAllChallenges=function(){return Todo.getAllChallenges().then(function(res){for(var i=0;i<res.data.length;i++)$scope.allChallenges.push(res.data[i])},function(err){console.log(err)}),console.log($scope.allChallenges),$scope.allChallenges},$scope.getAllChallenges()}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","$location","Authentication","Menus",function($scope,$location,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.getLocation=function(){return"/"===$location.path()}}]),angular.module("core").controller("HomeController",["$scope","$location","Authentication",function($scope,$location,Authentication){$scope.authentication=Authentication,$scope.$watch(function(){return $location.path()},function(next,current){Authentication.user&&"/"===current&&$location.path("/user-to-do")})}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("profile").config(["$stateProvider",function($stateProvider){$stateProvider.state("friend-search",{url:"/friendsearch",templateUrl:"modules/profile/views/friend-search.client.view.html"}).state("profile",{url:"/profile",templateUrl:"modules/profile/views/profile.client.view.html"}).state("userProfile",{url:"/users/:username",templateUrl:"modules/profile/views/profile.client.view.html",controller:["$scope","$stateParams",function($scope,$stateParams){$scope.userName=$stateParams.username}]})}]),angular.module("profile").controller("ProfileController",["$scope","Authentication","Todo","Friendsearch",function($scope,Authentication,Todo,Friendsearch){$scope.authentication=Authentication,$scope.getUserChallenges=function(){Todo.getUserChallenges().then(function(res){console.log("getUserChallenges res.data"),console.log(res.data),$scope.userChallenges=res.data},function(err){console.log(err)}).then(function(res){Todo.getAllChallenges().then(function(res){$scope.allChallenges=[];for(var i=0;i<res.data.length;i++){for(var toPush=!0,j=0;j<$scope.userChallenges.length;j++)res.data[i]._id===$scope.userChallenges[j]._id&&(toPush=!1);toPush&&$scope.allChallenges.push(res.data[i])}},function(err){console.log(err)})})},$scope.search=function(userName){console.log("searching for userName"),Friendsearch.search(userName).then(function(results){$scope.searchResults=results,$scope.searching=!0,console.log("results: "+$scope.searchResults)})},$scope.add=function(username){console.log("adding"+username),Friendsearch.add(username)},$scope.retrieveFriends=function(){Friendsearch.retrieveFriends().then(function(results){$scope.friendsList=results,console.log("friends: "+$scope.friendsList)})},$scope.getUser=function(){Friendsearch.getUser($scope.userName).then(function(results){console.log("Results from trying to search for user"+results.data),console.log(results),$scope.user=results})},$scope.init=function(){$scope.getUser()},$scope.init()}]),angular.module("profile").factory("Friendsearch",["$http",function($http){var search=function(userName){return $http({method:"POST",data:{userName:userName},url:"/users/friends/search"}).then(function(response){return console.log(response),response.data},function(err){console.log(err)})},add=function(userName){return $http({method:"POST",data:{userName:userName},url:"/users/friends/add"}).then(function(response){return console.log(response),response.data},function(err){console.log(err)})},retrieveFriends=function(userName){return $http({method:"GET",url:"/users/friends/"}).then(function(response){return console.log("friends list:"+response),console.log("friends list data:"+response.data),response.data},function(err){console.log(err)})},getUser=function(userName){return $http({method:"GET",url:"/users/"+userName}).then(function(response){return console.log("returned user object"+response),console.log("returned user data"+response.data),response.data},function(err){console.log(err)})};return{search:search,add:add,retrieveFriends:retrieveFriends,getUser:getUser}}]),angular.module("to-do-list").config(["$stateProvider",function($stateProvider){$stateProvider.state("user-to-do",{url:"/user-to-do",templateUrl:"modules/to-do-list/views/user-to-do.client.view.html"}).state("challenge-create",{url:"/challenge-create",templateUrl:"modules/to-do-list/views/challenge-create.client.view.html"})}]),angular.module("to-do-list").controller("UserToDoController",["$scope","Authentication","Todo","$location",function($scope,Authentication,Todo,$location){$scope.authentication=Authentication,$scope.getUserTasks=function(){Todo.getUserTasks().then(function(res){$scope.tasks=res.data},function(err){console.log(err)})},$scope.getUserChallenges=function(){Todo.getUserChallenges().then(function(res){$scope.userChallenges=res.data},function(err){console.log(err)}).then(function(res){Todo.getAllChallenges().then(function(res){$scope.allChallenges=[];for(var i=0;i<res.data.length;i++){for(var toPush=!0,j=0;j<$scope.userChallenges.length;j++)res.data[i]._id===$scope.userChallenges[j]._id&&(toPush=!1);toPush&&$scope.allChallenges.push(res.data[i])}},function(err){console.log(err)})})},$scope.addChallenge=function(index){Todo.putUserChallenge($scope.allChallenges[index]._id).then(function(res){$scope.getUserChallenges()},function(err){console.log(err)})},$scope.addUserTask=function(){var data=document.getElementById("taskData").value,task={description:data,completed:!1,rewards:null};Todo.putUserTask(task).then(function(res){document.getElementById("taskData").value="",$scope.getUserTasks()},function(err){console.log(err)})},$scope.removeTask=function(index){console.log("removing task"),Todo.removeTask(index),console.log("removing: "+$scope.tasks[index].description),$scope.getUserTasks()},$scope.completeUserTask=function(index){Todo.updateUserTask($scope.tasks[index]._id).then(function(res){$scope.getUserTasks()},function(err){console.log(err)})},$scope.completeChallengeTask=function(index){console.log("TASK ID"),console.log(this.task._id),console.log("CHALLENGE ID"),console.log(this.$parent.challenge._id),console.log("COMPLETED STATE BEFORE UPDATE"),console.log(this.task.completed),Todo.updateChallengeTask(this.task._id,this.$parent.challenge._id).then(function(res){$scope.getUserChallenges(),$scope.checkChallengeComplete(index)},function(err){console.log(err)})},$scope.checkChallengeComplete=function(index){Todo.checkChallengeComplete(index).then(function(response){setTimeout(function(){$scope.getUserChallenges()},100),console.log("challenge complete: "+response)})},$scope.nextDay=function(){$scope.today=new Date,$scope.dayModifier++,$scope.today.setDate($scope.today.getDate()+$scope.dayModifier),$scope.displayDay=$scope.today,$scope.prettyDate=$scope.displayDay.toDateString()},$scope.prevDay=function(){$scope.today=new Date,$scope.dayModifier--,$scope.today.setDate($scope.today.getDate()+$scope.dayModifier),$scope.displayDay=$scope.today,$scope.prettyDate=$scope.displayDay.toDateString()},$scope.checkDate=function(day){var itemDate=new Date(day);return itemDate.getDate()!==$scope.displayDay.getDate()?!1:itemDate.getMonth()!==$scope.displayDay.getMonth()?!1:itemDate.getFullYear()!==$scope.displayDay.getFullYear()?!1:!0},$scope.dayModifier=0,$scope.displayDay=new Date,$scope.prettyDate=$scope.displayDay.toDateString(),$scope.newChallenge={name:"",description:"",reward:"null",category:"",tasks:[]},$scope.addNewChallengeTask=function(){var data=document.getElementById("taskData").value;$scope.newChallenge.tasks.push({description:data,relativeDate:$scope.dayModifier}),document.getElementById("taskData").value=""},$scope.addNewChallengeName=function(){var data=document.getElementById("nameData").value;$scope.newChallenge.name=data,document.getElementById("taskData").value=""},$scope.addNewCategoryName=function(){var data=document.getElementById("catData").value;$scope.newChallenge.category=data},$scope.addNewDescription=function(){var data=document.getElementById("descData").value;$scope.newChallenge.description=data},$scope.checkRelativeDate=function(day){return day===$scope.dayModifier?!0:void 0},$scope.submitChallenge=function(){Todo.addChallenge($scope.newChallenge).then(function(res){$location.path("/user-to-do")},function(err){console.log(err)})},$scope.removeChallengeTask=function(challengeIndex,index){Todo.removeChallengeTask(challengeIndex,index),console.log("challenge index, index"+challengeIndex+index),$scope.getUserChallenges()},$scope.removeChallenge=function(id){Todo.removeChallenge(id),console.log("removing challenge"),$scope.getUserChallenges()},$scope.init=function(){$scope.getUserTasks(),$scope.getUserChallenges()},$scope.init()}]),angular.module("to-do-list").factory("Todo",["$http",function($http){var getUserTasks=function(){return $http({method:"GET",url:"/users/tasks"}).then(function(response){return response},function(err){console.log(err)})},getUserChallenges=function(){return $http({method:"GET",url:"/users/challenges"}).then(function(response){return response},function(err){console.log(err)})},getAllChallenges=function(){return $http({method:"GET",url:"/challenges"}).then(function(response){return response},function(err){console.log(err)})},putUserChallenge=function(id){return $http({method:"PUT",url:"/users/challenges",data:{_id:id}}).then(function(response){return response},function(err){console.log(err)})},putUserTask=function(task){return $http({method:"PUT",url:"/users/tasks",data:task}).then(function(response){return response},function(err){console.log(err)})},removeTask=function(index){return $http({method:"POST",url:"/users/tasks",data:{index:index}}).then(function(response){return response},function(err){console.log(err)})},updateUserTask=function(taskId){return $http({method:"PUT",url:"/users/tasks/update",data:{taskId:taskId}}).then(function(response){return response},function(err){console.log(err)})},updateChallengeTask=function(taskId,challengeId){return $http({method:"PUT",url:"/users/tasks/update",data:{taskId:String(taskId),challengeId:String(challengeId)}}).then(function(response){return response},function(err){console.log(err)})},addChallenge=function(data){return $http({method:"PUT",url:"/challenges",data:data}).then(function(response){return response},function(err){console.log(err)})},removeChallengeTask=function(challengeIndex,index){return $http({method:"POST",url:"/users/challenges/tasks/remove",data:{index:index,challengeIndex:challengeIndex}}).then(function(response){return response},function(err){console.log(err)})},removeChallenge=function(index){return $http({method:"PUT",url:"/users/challenges/remove",data:{index:index}}).then(function(response){return response},function(err){console.log(err)})},checkChallengeComplete=function(index){return $http({method:"POST",url:"/users/challenges/check",data:{index:index}}).then(function(response){return console.log("Http response for checkChallengeComplete"+response),response},function(err){console.log(err)})};return{getUserTasks:getUserTasks,getUserChallenges:getUserChallenges,getAllChallenges:getAllChallenges,putUserChallenge:putUserChallenge,putUserTask:putUserTask,updateUserTask:updateUserTask,updateChallengeTask:updateChallengeTask,addChallenge:addChallenge,removeTask:removeTask,removeChallengeTask:removeChallengeTask,removeChallenge:removeChallenge,checkChallengeComplete:checkChallengeComplete}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("editProfile",{url:"/settings/editProfile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);